{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","filterReducer","query","status","todos","message","todosReducer","isLoading","error","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","trimQuery","trim","title","toLowerCase","includes","completed","getFilteredTodos","length","className","map","id","onClick","TodoFilter","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","userId","useState","user","setUser","useEffect","getUser","href","email","name","App","data","catch","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eeb758de.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype ChangeStatusAction = { type: 'filter/STATUS'; payload: Status };\ntype ChangeQueryAction = { type: 'filter/QUERY'; payload: string };\n\nconst changeFilterStatus = (value: Status): ChangeStatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\nconst changeFilterQuery = (value: string): ChangeQueryAction => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\nexport const actions = {\n  changeFilterStatus,\n  changeFilterQuery,\n};\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\ntype Action = ChangeQueryAction | ChangeStatusAction;\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype StartFetchingTodosAction = { type: 'todos/LOADING' };\ntype SuccessFetchingTodosAction = { type: 'todos/LOADED'; payload: Todo[] };\ntype FailedFetchingTodosAction = { type: 'todos/ERROR'; payload: string };\n\nconst startFetchingTodos = (): StartFetchingTodosAction => ({\n  type: 'todos/LOADING',\n});\n\nconst setTodos = (todos: Todo[]): SuccessFetchingTodosAction => ({\n  type: 'todos/LOADED',\n  payload: todos,\n});\n\nconst setTodosError = (message: string): FailedFetchingTodosAction => ({\n  type: 'todos/ERROR',\n  payload: message,\n});\n\nexport const actions = { startFetchingTodos, setTodos, setTodosError };\n\ntype State = { todos: Todo[]; isLoading: boolean; error: string };\ntype Action =\n  | StartFetchingTodosAction\n  | SuccessFetchingTodosAction\n  | FailedFetchingTodosAction;\n\nconst todosReducer = (\n  state: State = { todos: [], isLoading: false, error: '' },\n  action: Action,\n): {\n  todos: Todo[];\n  isLoading: boolean;\n  error: string;\n} => {\n  switch (action.type) {\n    case 'todos/LOADING':\n      return { ...state, isLoading: true };\n    case 'todos/LOADED':\n      return { ...state, isLoading: false, todos: action.payload };\n    case 'todos/ERROR':\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\ntype TodoListProps = {\n  todos: Todo[];\n  currentTodo: Todo | null;\n};\n\nconst getFilteredTodos = (query: string, status: Status, todos: Todo[]) => {\n  const trimQuery = query.trim();\n  let filteredTodos = todos;\n\n  if (trimQuery) {\n    // eslint-disable-next-line max-len\n    filteredTodos = filteredTodos.filter((todo) => todo.title.toLowerCase().includes(trimQuery.toLowerCase()));\n  }\n\n  switch (status) {\n    case 'active':\n      return filteredTodos.filter((todo) => !todo.completed);\n    case 'completed':\n      return filteredTodos.filter((todo) => todo.completed);\n    default:\n      return filteredTodos;\n  }\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos, currentTodo }) => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector((state) => state.filter);\n\n  const filteredTodos = useMemo(\n    () => getFilteredTodos(query, status, todos),\n    [todos, query, status],\n  );\n\n  return (\n    <>\n      {filteredTodos.length > 0 ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map((todo) => (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={\n                      todo.completed ? 'has-text-success' : 'has-text-danger'\n                    }\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(actions.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={`far ${\n                          todo.id === currentTodo?.id\n                            ? 'fa-eye-slash'\n                            : 'fa-eye'\n                        }`}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query } = useAppSelector((state) => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={({ target: { value } }) => dispatch(actions.changeFilterStatus(value as Status))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          placeholder=\"Search...\"\n          onChange={({ target: { value } }) => dispatch(actions.changeFilterQuery(value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(actions.changeFilterQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader: React.FC = () => (\r\n  <div className=\"Loader\" data-cy=\"loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype TodoModalProps = {\n  currentTodo: Todo;\n};\n\nexport const TodoModal: React.FC<TodoModalProps> = ({\n  currentTodo: {\n    userId, title, id, completed,\n  },\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getUser(userId).then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { isLoading, todos } = useAppSelector((state) => state.todos);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  useEffect(() => {\n    dispatch(actions.startFetchingTodos());\n    getTodos()\n      .then((data) => dispatch(actions.setTodos(data)))\n      .catch(() => dispatch(actions.setTodosError('Something went wrong')));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList currentTodo={currentTodo} todos={todos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal currentTodo={currentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}